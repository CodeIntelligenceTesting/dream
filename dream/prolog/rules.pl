memcpy_1(ParentId, Id_0, ChildrenIds, Transformation, Dst, Src, Len) :-
    Transformation = 'memcpy(dst, src, len);',
    sequenceT(Id_0, ParentId, Id_1),
    ChildrenIds = [Id_2, Id_3, Id_4],
    assignT(Id_2, Id_0, Id_5, Id_6),
    identT(Id_5, Id_2, K),
    Len = Id_6,
    assignT(Id_3, Id_0, Id_7, Id_8),
    identT(Id_7, Id_3, D),
    Dst = Id_8,
    directly_after(Id_3, Id_2, Id_1),
    ifT(Id_4, Id_0, Id_9, Id_10, 'null'),
    operationT(Id_9, Id_4, Id_11, '!='),
    length(Id_11, 2),
    identT(Id_12, Id_9, K),
    member(Id_12, Id_11),
    numericLiteralT(Id_13, Id_9, 0),
    member(Id_13, Id_11),
    directly_after(Id_13, Id_12, Id_11),
    Id_12 \= Id_13,
    sequenceT(Id_10, Id_4, Id_14),
    length(Id_14, 2),
    assignT(Id_15, Id_10, Id_17, Id_18),
    identT(Id_17, Id_15, X),
    operationT(Id_18, Id_15, Id_19, '+'),
    length(Id_19, 2),
    Src = Id_20,
    member(Id_20, Id_19),
    operationT(Id_21, Id_18, Id_22, '-'),
    length(Id_22, 1),
    Dst2 = Id_23,
    member(Id_23, Id_22),
    member(Id_21, Id_19),
    Id_20 \= Id_21,
    loopT(Id_16, Id_10, 'doWhile', Id_24, Id_25),
    operationT(Id_24, Id_16, Id_26, '!='),
    length(Id_26, 2),
    identT(Id_27, Id_24, K),
    member(Id_27, Id_26),
    numericLiteralT(Id_28, Id_24, 0),
    member(Id_28, Id_26),
    directly_after(Id_28, Id_27, Id_26),
    Id_27 \= Id_28,
    sequenceT(Id_25, Id_16, Id_29),
    length(Id_29, 4),
    assignT(Id_30, Id_25, Id_34, Id_35),
    identT(Id_34, Id_30, C),
    memoryT(Id_35, Id_30, Id_36),
    operationT(Id_36, Id_35, Id_37, '+'),
    length(Id_37, 2),
    identT(Id_38, Id_36, X),
    member(Id_38, Id_37),
    identT(Id_39, Id_36, D),
    member(Id_39, Id_37),
    Id_38 \= Id_39,
    assignT(Id_31, Id_25, Id_40, Id_41),
    memoryT(Id_40, Id_31, Id_42),
    identT(Id_42, Id_40, D),
    identT(Id_41, Id_31, C),
    directly_after(Id_31, Id_30, Id_29),
    assignT(Id_32, Id_25, Id_43, Id_44),
    identT(Id_43, Id_32, D),
    operationT(Id_44, Id_32, Id_45, '+'),
    length(Id_45, 2),
    identT(Id_46, Id_44, D),
    member(Id_46, Id_45),
    numericLiteralT(Id_47, Id_44, 1),
    member(Id_47, Id_45),
    Id_46 \= Id_47,
    directly_after(Id_32, Id_31, Id_29),
    assignT(Id_33, Id_25, Id_48, Id_49),
    identT(Id_48, Id_33, K),
    operationT(Id_49, Id_33, Id_50, '+'),
    length(Id_50, 2),
    identT(Id_51, Id_49, K),
    member(Id_51, Id_50),
    numericLiteralT(Id_52, Id_49, -1),
    member(Id_52, Id_50),
    Id_51 \= Id_52,
    directly_after(Id_33, Id_32, Id_29),
    directly_after(Id_16, Id_15, Id_14),
    directly_after(Id_4, Id_3, Id_1),
    same_expression(Dst, Dst2),
    C \= X,
    C \= K,
    C \= D,
    X \= K,
    X \= D,
    K \= D.

memcpy_2(ParentId, Id_0, ChildrenIds, Transformation, Dst, Src, Len) :-
    Transformation = 'memcpy(dst, src, len);',
    sequenceT(Id_0, ParentId, Id_1),
    ChildrenIds = [Id_2, Id_3, Id_4],
    assignT(Id_2, Id_0, Id_5, Id_6),
    identT(Id_5, Id_2, Len_Cpy),
    Len = Id_6,
    assignT(Id_3, Id_0, Id_7, Id_8),
    identT(Id_7, Id_3, Src_Cpy),
    Src = Id_8,
    directly_after(Id_3, Id_2, Id_1),
    ifT(Id_4, Id_0, Id_9, Id_10, 'null'),
    operationT(Id_9, Id_4, Id_11, '!='),
    length(Id_11, 2),
    identT(Id_12, Id_9, Len_Cpy),
    member(Id_12, Id_11),
    numericLiteralT(Id_13, Id_9, 0),
    member(Id_13, Id_11),
    directly_after(Id_13, Id_12, Id_11),
    Id_12 \= Id_13,
    sequenceT(Id_10, Id_4, Id_14),
    length(Id_14, 4),
    assignT(Id_15, Id_10, Id_19, Id_20),
    identT(Id_19, Id_15, A),
    identT(Id_20, Id_15, Dst),
    assignT(Id_16, Id_10, Id_21, Id_22),
    identT(Id_21, Id_16, D),
    operationT(Id_22, Id_16, Id_23, '+'),
    length(Id_23, 2),
    identT(Id_24, Id_22, Src_Cpy),
    member(Id_24, Id_23),
    operationT(Id_25, Id_22, Id_26, '-'),
    length(Id_26, 1),
    identT(Id_27, Id_25, Dst),
    member(Id_27, Id_26),
    member(Id_25, Id_23),
    Id_24 \= Id_25,
    directly_after(Id_16, Id_15, Id_14),
    assignT(Id_17, Id_10, Id_28, Id_29),
    identT(Id_28, Id_17, I),
    identT(Id_29, Id_17, Len_Cpy),
    directly_after(Id_17, Id_16, Id_14),
    loopT(Id_18, Id_10, 'doWhile', Id_30, Id_31),
    operationT(Id_30, Id_18, Id_32, '!='),
    length(Id_32, 2),
    identT(Id_33, Id_30, I),
    member(Id_33, Id_32),
    numericLiteralT(Id_34, Id_30, 0),
    member(Id_34, Id_32),
    directly_after(Id_34, Id_33, Id_32),
    Id_33 \= Id_34,
    sequenceT(Id_31, Id_18, Id_35),
    length(Id_35, 3),
    assignT(Id_36, Id_31, Id_39, Id_40),
    memoryT(Id_39, Id_36, Id_41),
    identT(Id_41, Id_39, A),
    memoryT(Id_40, Id_36, Id_42),
    operationT(Id_42, Id_40, Id_43, '+'),
    length(Id_43, 2),
    identT(Id_44, Id_42, D),
    member(Id_44, Id_43),
    identT(Id_45, Id_42, A),
    member(Id_45, Id_43),
    Id_44 \= Id_45,
    assignT(Id_37, Id_31, Id_46, Id_47),
    identT(Id_46, Id_37, A),
    operationT(Id_47, Id_37, Id_48, '+'),
    length(Id_48, 2),
    identT(Id_49, Id_47, A),
    member(Id_49, Id_48),
    numericLiteralT(Id_50, Id_47, 1),
    member(Id_50, Id_48),
    Id_49 \= Id_50,
    directly_after(Id_37, Id_36, Id_35),
    assignT(Id_38, Id_31, Id_51, Id_52),
    identT(Id_51, Id_38, I),
    operationT(Id_52, Id_38, Id_53, '+'),
    length(Id_53, 2),
    identT(Id_54, Id_52, I),
    member(Id_54, Id_53),
    numericLiteralT(Id_55, Id_52, -1),
    member(Id_55, Id_53),
    Id_54 \= Id_55,
    directly_after(Id_38, Id_37, Id_35),
    directly_after(Id_18, Id_17, Id_14),
    directly_after(Id_4, Id_3, Id_1),
    A \= D,
    A \= Src_Cpy,
    A \= I,
    A \= Dst,
    A \= Len_Cpy,
    D \= Src_Cpy,
    D \= I,
    D \= Dst,
    D \= Len_Cpy,
    Src_Cpy \= I,
    Src_Cpy \= Dst,
    Src_Cpy \= Len_Cpy,
    I \= Dst,
    I \= Len_Cpy,
    Dst \= Len_Cpy.

memcpy_3(ParentId, Id_0, ChildrenIds, Transformation, Dst, Src, Len) :-
    Transformation = 'memcpy(dst, src, len);',
    sequenceT(Id_0, ParentId, Id_1),
    ChildrenIds = [Id_2, Id_3],
    assignT(Id_2, Id_0, Id_4, Id_5),
    identT(Id_4, Id_2, D),
    operationT(Id_5, Id_2, Id_6, '+'),
    length(Id_6, 2),
    Src = Id_7,
    member(Id_7, Id_6),
    operationT(Id_8, Id_5, Id_9, '-'),
    length(Id_9, 1),
    identT(Id_10, Id_8, Dst),
    member(Id_10, Id_9),
    member(Id_8, Id_6),
    Id_7 \= Id_8,
    loopT(Id_3, Id_0, 'doWhile', Id_11, Id_12),
    operationT(Id_11, Id_3, Id_13, '!='),
    length(Id_13, 2),
    identT(Id_14, Id_11, Len),
    member(Id_14, Id_13),
    numericLiteralT(Id_15, Id_11, 0),
    member(Id_15, Id_13),
    directly_after(Id_15, Id_14, Id_13),
    Id_14 \= Id_15,
    sequenceT(Id_12, Id_3, Id_16),
    length(Id_16, 4),
    assignT(Id_17, Id_12, Id_21, Id_22),
    identT(Id_21, Id_17, C),
    memoryT(Id_22, Id_17, Id_23),
    operationT(Id_23, Id_22, Id_24, '+'),
    length(Id_24, 2),
    identT(Id_25, Id_23, D),
    member(Id_25, Id_24),
    identT(Id_26, Id_23, Dst),
    member(Id_26, Id_24),
    Id_25 \= Id_26,
    assignT(Id_18, Id_12, Id_27, Id_28),
    memoryT(Id_27, Id_18, Id_29),
    identT(Id_29, Id_27, Dst),
    identT(Id_28, Id_18, C),
    directly_after(Id_18, Id_17, Id_16),
    assignT(Id_19, Id_12, Id_30, Id_31),
    identT(Id_30, Id_19, Dst),
    operationT(Id_31, Id_19, Id_32, '+'),
    length(Id_32, 2),
    identT(Id_33, Id_31, Dst),
    member(Id_33, Id_32),
    numericLiteralT(Id_34, Id_31, 1),
    member(Id_34, Id_32),
    Id_33 \= Id_34,
    directly_after(Id_19, Id_18, Id_16),
    assignT(Id_20, Id_12, Id_35, Id_36),
    identT(Id_35, Id_20, Len),
    operationT(Id_36, Id_20, Id_37, '+'),
    length(Id_37, 2),
    identT(Id_38, Id_36, Len),
    member(Id_38, Id_37),
    numericLiteralT(Id_39, Id_36, -1),
    member(Id_39, Id_37),
    Id_38 \= Id_39,
    directly_after(Id_20, Id_19, Id_16),
    directly_after(Id_3, Id_2, Id_1),
    C \= Dst,
    C \= D,
    C \= Len,
    Dst \= D,
    Dst \= Len,
    D \= Len.

memcpy_4(ParentId, Id_0, ChildrenIds, Transformation, Dst, Src, Len) :-
    Transformation = 'memcpy(dst, src, len);',
    sequenceT(Id_0, ParentId, Id_1),
    ChildrenIds = [Id_2, Id_3, Id_4],
    assignT(Id_2, Id_0, Id_5, Id_6),
    identT(Id_5, Id_2, D),
    operationT(Id_6, Id_2, Id_7, '+'),
    length(Id_7, 2),
    Src = Id_8,
    member(Id_8, Id_7),
    operationT(Id_9, Id_6, Id_10, '-'),
    length(Id_10, 1),
    identT(Id_11, Id_9, Dst),
    member(Id_11, Id_10),
    member(Id_9, Id_7),
    Id_8 \= Id_9,
    assignT(Id_3, Id_0, Id_12, Id_13),
    identT(Id_12, Id_3, I),
    Len = Id_13,
    directly_after(Id_3, Id_2, Id_1),
    loopT(Id_4, Id_0, 'doWhile', Id_14, Id_15),
    operationT(Id_14, Id_4, Id_16, '!='),
    length(Id_16, 2),
    identT(Id_17, Id_14, I),
    member(Id_17, Id_16),
    numericLiteralT(Id_18, Id_14, 0),
    member(Id_18, Id_16),
    directly_after(Id_18, Id_17, Id_16),
    Id_17 \= Id_18,
    sequenceT(Id_15, Id_4, Id_19),
    length(Id_19, 4),
    assignT(Id_20, Id_15, Id_24, Id_25),
    identT(Id_24, Id_20, C),
    memoryT(Id_25, Id_20, Id_26),
    operationT(Id_26, Id_25, Id_27, '+'),
    length(Id_27, 2),
    identT(Id_28, Id_26, D),
    member(Id_28, Id_27),
    identT(Id_29, Id_26, Dst),
    member(Id_29, Id_27),
    Id_28 \= Id_29,
    assignT(Id_21, Id_15, Id_30, Id_31),
    memoryT(Id_30, Id_21, Id_32),
    identT(Id_32, Id_30, Dst),
    identT(Id_31, Id_21, C),
    directly_after(Id_21, Id_20, Id_19),
    assignT(Id_22, Id_15, Id_33, Id_34),
    identT(Id_33, Id_22, Dst),
    operationT(Id_34, Id_22, Id_35, '+'),
    length(Id_35, 2),
    identT(Id_36, Id_34, Dst),
    member(Id_36, Id_35),
    numericLiteralT(Id_37, Id_34, 1),
    member(Id_37, Id_35),
    Id_36 \= Id_37,
    directly_after(Id_22, Id_21, Id_19),
    assignT(Id_23, Id_15, Id_38, Id_39),
    identT(Id_38, Id_23, I),
    operationT(Id_39, Id_23, Id_40, '+'),
    length(Id_40, 2),
    identT(Id_41, Id_39, I),
    member(Id_41, Id_40),
    numericLiteralT(Id_42, Id_39, -1),
    member(Id_42, Id_40),
    Id_41 \= Id_42,
    directly_after(Id_23, Id_22, Id_19),
    directly_after(Id_4, Id_3, Id_1),
    I \= C,
    I \= Dst,
    I \= D,
    C \= Dst,
    C \= D,
    Dst \= D.

strlen_w(ParentId, Id_0, ChildrenIds, Transformation, Len, Str) :-
    Transformation = 'len = wclen(str);',
    sequenceT(Id_0, ParentId, Id_1),
    ChildrenIds = [Id_2, Id_3],
    assignT(Id_2, Id_0, Id_4, Id_5),
    identT(Id_4, Id_2, Len),
    numericLiteralT(Id_5, Id_2, 0),
    ifT(Id_3, Id_0, Id_6, Id_7, 'null'),
    operationT(Id_6, Id_3, Id_8, '!='),
    length(Id_8, 2),
    memoryT(Id_9, Id_6, Id_11),
    identT(Id_11, Id_9, Str),
    member(Id_9, Id_8),
    identT(Id_10, Id_6, Len),
    member(Id_10, Id_8),
    directly_after(Id_10, Id_9, Id_8),
    Id_9 \= Id_10,
    loopT(Id_7, Id_3, 'doWhile', Id_12, Id_13),
    operationT(Id_12, Id_7, Id_14, '!='),
    length(Id_14, 2),
    memoryT(Id_15, Id_12, Id_17),
    operationT(Id_17, Id_15, Id_18, '+'),
    length(Id_18, 2),
    identT(Id_19, Id_17, Str),
    member(Id_19, Id_18),
    operationT(Id_20, Id_17, Id_21, '*'),
    length(Id_21, 2),
    identT(Id_22, Id_20, Len),
    member(Id_22, Id_21),
    numericLiteralT(Id_23, Id_20, 2),
    member(Id_23, Id_21),
    Id_22 \= Id_23,
    member(Id_20, Id_18),
    Id_19 \= Id_20,
    member(Id_15, Id_14),
    numericLiteralT(Id_16, Id_12, 0),
    member(Id_16, Id_14),
    directly_after(Id_16, Id_15, Id_14),
    Id_15 \= Id_16,
    assignT(Id_13, Id_7, Id_24, Id_25),
    identT(Id_24, Id_13, Len),
    operationT(Id_25, Id_13, Id_26, '+'),
    length(Id_26, 2),
    identT(Id_27, Id_25, Len),
    member(Id_27, Id_26),
    numericLiteralT(Id_28, Id_25, 1),
    member(Id_28, Id_26),
    Id_27 \= Id_28,
    directly_after(Id_3, Id_2, Id_1),
    Str \= Len.

strlen_1(ParentId, Id_0, ChildrenIds, Transformation, Len, Str) :-
    Transformation = 'len = wclen(str);',
    sequenceT(Id_0, ParentId, Id_1),
    ChildrenIds = [Id_2, Id_3],
    ifT(Id_2, Id_0, Id_4, Id_5, 'null'),
    operationT(Id_4, Id_2, Id_6, '!='),
    length(Id_6, 2),
    memoryT(Id_7, Id_4, Id_9),
    identT(Id_9, Id_7, Str),
    member(Id_7, Id_6),
    identT(Id_8, Id_4, Len),
    member(Id_8, Id_6),
    directly_after(Id_8, Id_7, Id_6),
    Id_7 \= Id_8,
    loopT(Id_5, Id_2, 'doWhile', Id_10, Id_11),
    operationT(Id_10, Id_5, Id_12, '!='),
    length(Id_12, 2),
    memoryT(Id_13, Id_10, Id_15),
    operationT(Id_15, Id_13, Id_16, '+'),
    length(Id_16, 2),
    identT(Id_17, Id_15, Str),
    member(Id_17, Id_16),
    identT(Id_18, Id_15, Len),
    member(Id_18, Id_16),
    Id_17 \= Id_18,
    member(Id_13, Id_12),
    numericLiteralT(Id_14, Id_10, 0),
    member(Id_14, Id_12),
    directly_after(Id_14, Id_13, Id_12),
    Id_13 \= Id_14,
    assignT(Id_11, Id_5, Id_19, Id_20),
    identT(Id_19, Id_11, Len),
    operationT(Id_20, Id_11, Id_21, '+'),
    length(Id_21, 2),
    identT(Id_22, Id_20, Len),
    member(Id_22, Id_21),
    numericLiteralT(Id_23, Id_20, 1),
    member(Id_23, Id_21),
    Id_22 \= Id_23,
    assignT(Id_3, Id_0, Id_24, Id_25),
    identT(Id_24, Id_3, Len),
    operationT(Id_25, Id_3, Id_26, '+'),
    length(Id_26, 2),
    identT(Id_27, Id_25, Len),
    member(Id_27, Id_26),
    numericLiteralT(Id_28, Id_25, -1),
    member(Id_28, Id_26),
    Id_27 \= Id_28,
    directly_after(Id_3, Id_2, Id_1),
    Len \= Str.

strlen_2(ParentId, Id_0, ChildrenIds, Transformation, Len, Str) :-
    Transformation = 'len = strlen(str);',
    sequenceT(Id_0, ParentId, Id_1),
    ChildrenIds = [Id_2, Id_3],
    assignT(Id_2, Id_0, Id_4, Id_5),
    identT(Id_4, Id_2, Len),
    numericLiteralT(Id_5, Id_2, 0),
    ifT(Id_3, Id_0, Id_6, Id_7, 'null'),
    operationT(Id_6, Id_3, Id_8, '!='),
    length(Id_8, 2),
    memoryT(Id_9, Id_6, Id_11),
    identT(Id_11, Id_9, Str),
    member(Id_9, Id_8),
    identT(Id_10, Id_6, Len),
    member(Id_10, Id_8),
    directly_after(Id_10, Id_9, Id_8),
    Id_9 \= Id_10,
    loopT(Id_7, Id_3, 'doWhile', Id_12, Id_13),
    operationT(Id_12, Id_7, Id_14, '!='),
    length(Id_14, 2),
    memoryT(Id_15, Id_12, Id_17),
    operationT(Id_17, Id_15, Id_18, '+'),
    length(Id_18, 2),
    identT(Id_19, Id_17, Str),
    member(Id_19, Id_18),
    identT(Id_20, Id_17, Len),
    member(Id_20, Id_18),
    Id_19 \= Id_20,
    member(Id_15, Id_14),
    numericLiteralT(Id_16, Id_12, 0),
    member(Id_16, Id_14),
    directly_after(Id_16, Id_15, Id_14),
    Id_15 \= Id_16,
    assignT(Id_13, Id_7, Id_21, Id_22),
    identT(Id_21, Id_13, Len),
    operationT(Id_22, Id_13, Id_23, '+'),
    length(Id_23, 2),
    identT(Id_24, Id_22, Len),
    member(Id_24, Id_23),
    numericLiteralT(Id_25, Id_22, 1),
    member(Id_25, Id_23),
    Id_24 \= Id_25,
    directly_after(Id_3, Id_2, Id_1),
    Str \= Len.

wcscmp(ParentId, Id_0, ChildrenIds, Transformation, Wsstr1, Wcstr2, Num, Result) :-
    Transformation = 'result = wcscmp(wsStr1, wcStr2);',
    loopT(Id_0, ParentId, 'doWhile', Id_1, Id_2),
    operationT(Id_1, Id_0, Id_3, '<'),
    length(Id_3, 2),
    identT(Id_4, Id_1, Wsstr1),
    member(Id_4, Id_3),
    identT(Id_5, Id_1, Num),
    member(Id_5, Id_3),
    directly_after(Id_5, Id_4, Id_3),
    Id_4 \= Id_5,
    sequenceT(Id_2, Id_0, Id_6),
    length(Id_6, 8),
    assignT(Id_7, Id_2, Id_15, Id_16),
    identT(Id_15, Id_7, C1),
    memoryT(Id_16, Id_7, Id_17),
    identT(Id_17, Id_16, Wsstr1),
    ifT(Id_8, Id_2, Id_18, Id_19, Id_20),
    operationT(Id_18, Id_8, Id_21, '||'),
    length(Id_21, 2),
    operationT(Id_22, Id_18, Id_24, '<'),
    length(Id_24, 2),
    identT(Id_25, Id_22, C1),
    member(Id_25, Id_24),
    numericLiteralT(Id_26, Id_22, 65),
    member(Id_26, Id_24),
    directly_after(Id_26, Id_25, Id_24),
    Id_25 \= Id_26,
    member(Id_22, Id_21),
    operationT(Id_23, Id_18, Id_27, '>'),
    length(Id_27, 2),
    identT(Id_28, Id_23, C1),
    member(Id_28, Id_27),
    numericLiteralT(Id_29, Id_23, 90),
    member(Id_29, Id_27),
    directly_after(Id_29, Id_28, Id_27),
    Id_28 \= Id_29,
    member(Id_23, Id_21),
    Id_22 \= Id_23,
    assignT(Id_19, Id_8, Id_30, Id_31),
    identT(Id_30, Id_19, V1),
    identT(Id_31, Id_19, C1),
    assignT(Id_20, Id_8, Id_32, Id_33),
    identT(Id_32, Id_20, V1),
    operationT(Id_33, Id_20, Id_34, '+'),
    length(Id_34, 2),
    identT(Id_35, Id_33, C1),
    member(Id_35, Id_34),
    numericLiteralT(Id_36, Id_33, 32),
    member(Id_36, Id_34),
    Id_35 \= Id_36,
    directly_after(Id_8, Id_7, Id_6),
    assignT(Id_9, Id_2, Id_37, Id_38),
    identT(Id_37, Id_9, C2),
    memoryT(Id_38, Id_9, Id_39),
    identT(Id_39, Id_38, Wcstr2),
    directly_after(Id_9, Id_8, Id_6),
    ifT(Id_10, Id_2, Id_40, Id_41, Id_42),
    operationT(Id_40, Id_10, Id_43, '||'),
    length(Id_43, 2),
    operationT(Id_44, Id_40, Id_46, '<'),
    length(Id_46, 2),
    identT(Id_47, Id_44, C2),
    member(Id_47, Id_46),
    numericLiteralT(Id_48, Id_44, 65),
    member(Id_48, Id_46),
    directly_after(Id_48, Id_47, Id_46),
    Id_47 \= Id_48,
    member(Id_44, Id_43),
    operationT(Id_45, Id_40, Id_49, '>'),
    length(Id_49, 2),
    identT(Id_50, Id_45, C2),
    member(Id_50, Id_49),
    numericLiteralT(Id_51, Id_45, 90),
    member(Id_51, Id_49),
    directly_after(Id_51, Id_50, Id_49),
    Id_50 \= Id_51,
    member(Id_45, Id_43),
    Id_44 \= Id_45,
    assignT(Id_41, Id_10, Id_52, Id_53),
    identT(Id_52, Id_41, V2),
    identT(Id_53, Id_41, C2),
    assignT(Id_42, Id_10, Id_54, Id_55),
    identT(Id_54, Id_42, V2),
    operationT(Id_55, Id_42, Id_56, '+'),
    length(Id_56, 2),
    identT(Id_57, Id_55, C2),
    member(Id_57, Id_56),
    numericLiteralT(Id_58, Id_55, 32),
    member(Id_58, Id_56),
    Id_57 \= Id_58,
    directly_after(Id_10, Id_9, Id_6),
    assignT(Id_11, Id_2, Id_59, Id_60),
    identT(Id_59, Id_11, Result),
    operationT(Id_60, Id_11, Id_61, '+'),
    length(Id_61, 2),
    identT(Id_62, Id_60, V1),
    member(Id_62, Id_61),
    operationT(Id_63, Id_60, Id_64, '-'),
    length(Id_64, 1),
    identT(Id_65, Id_63, V2),
    member(Id_65, Id_64),
    member(Id_63, Id_61),
    Id_62 \= Id_63,
    directly_after(Id_11, Id_10, Id_6),
    ifT(Id_12, Id_2, Id_66, Id_67, 'null'),
    operationT(Id_66, Id_12, Id_68, '!='),
    length(Id_68, 2),
    identT(Id_69, Id_66, Result),
    member(Id_69, Id_68),
    numericLiteralT(Id_70, Id_66, 0),
    member(Id_70, Id_68),
    directly_after(Id_70, Id_69, Id_68),
    Id_69 \= Id_70,
    returnT(Id_67, Id_12, Id_71),
    identT(Id_71, Id_67, Result),
    directly_after(Id_12, Id_11, Id_6),
    assignT(Id_13, Id_2, Id_72, Id_73),
    identT(Id_72, Id_13, Wsstr1),
    operationT(Id_73, Id_13, Id_74, '+'),
    length(Id_74, 2),
    identT(Id_75, Id_73, Wsstr1),
    member(Id_75, Id_74),
    numericLiteralT(Id_76, Id_73, 2),
    member(Id_76, Id_74),
    Id_75 \= Id_76,
    directly_after(Id_13, Id_12, Id_6),
    assignT(Id_14, Id_2, Id_77, Id_78),
    identT(Id_77, Id_14, Wcstr2),
    operationT(Id_78, Id_14, Id_79, '+'),
    length(Id_79, 2),
    identT(Id_80, Id_78, Wcstr2),
    member(Id_80, Id_79),
    numericLiteralT(Id_81, Id_78, 2),
    member(Id_81, Id_79),
    Id_80 \= Id_81,
    directly_after(Id_14, Id_13, Id_6),
    Wsstr1 \= V1,
    Wsstr1 \= Wcstr2,
    Wsstr1 \= V2,
    Wsstr1 \= Num,
    Wsstr1 \= Result,
    Wsstr1 \= C2,
    Wsstr1 \= C1,
    V1 \= Wcstr2,
    V1 \= V2,
    V1 \= Num,
    V1 \= Result,
    V1 \= C2,
    V1 \= C1,
    Wcstr2 \= V2,
    Wcstr2 \= Num,
    Wcstr2 \= Result,
    Wcstr2 \= C2,
    Wcstr2 \= C1,
    V2 \= Num,
    V2 \= Result,
    V2 \= C2,
    V2 \= C1,
    Num \= Result,
    Num \= C2,
    Num \= C1,
    Result \= C2,
    Result \= C1,
    C2 \= C1.

strncmpi_1(ParentId, Id_0, ChildrenIds, Transformation, Str1, Str2, Result, X) :-
    Transformation = 'result = strncmpi(str1, str2, x - str1);',
    sequenceT(Id_0, ParentId, Id_1),
    ChildrenIds = [Id_2, Id_3],
    assignT(Id_2, Id_0, Id_4, Id_5),
    identT(Id_4, Id_2, I),
    operationT(Id_5, Id_2, Id_6, '+'),
    length(Id_6, 2),
    identT(Id_7, Id_5, Str2),
    member(Id_7, Id_6),
    operationT(Id_8, Id_5, Id_9, '-'),
    length(Id_9, 1),
    identT(Id_10, Id_8, Str1),
    member(Id_10, Id_9),
    member(Id_8, Id_6),
    Id_7 \= Id_8,
    loopT(Id_3, Id_0, 'doWhile', Id_11, Id_12),
    operationT(Id_11, Id_3, Id_13, '<'),
    length(Id_13, 2),
    identT(Id_14, Id_11, Str1),
    member(Id_14, Id_13),
    X = Id_15,
    member(Id_15, Id_13),
    directly_after(Id_15, Id_14, Id_13),
    Id_14 \= Id_15,
    sequenceT(Id_12, Id_3, Id_16),
    length(Id_16, 7),
    assignT(Id_17, Id_12, Id_24, Id_25),
    identT(Id_24, Id_17, C1),
    memoryT(Id_25, Id_17, Id_26),
    identT(Id_26, Id_25, Str1),
    ifT(Id_18, Id_12, Id_27, Id_28, Id_29),
    operationT(Id_27, Id_18, Id_30, '||'),
    length(Id_30, 2),
    operationT(Id_31, Id_27, Id_33, '<'),
    length(Id_33, 2),
    identT(Id_34, Id_31, C1),
    member(Id_34, Id_33),
    numericLiteralT(Id_35, Id_31, 65),
    member(Id_35, Id_33),
    directly_after(Id_35, Id_34, Id_33),
    Id_34 \= Id_35,
    member(Id_31, Id_30),
    operationT(Id_32, Id_27, Id_36, '>'),
    length(Id_36, 2),
    identT(Id_37, Id_32, C1),
    member(Id_37, Id_36),
    numericLiteralT(Id_38, Id_32, 90),
    member(Id_38, Id_36),
    directly_after(Id_38, Id_37, Id_36),
    Id_37 \= Id_38,
    member(Id_32, Id_30),
    Id_31 \= Id_32,
    assignT(Id_28, Id_18, Id_39, Id_40),
    identT(Id_39, Id_28, V1),
    identT(Id_40, Id_28, C1),
    assignT(Id_29, Id_18, Id_41, Id_42),
    identT(Id_41, Id_29, V1),
    operationT(Id_42, Id_29, Id_43, '+'),
    length(Id_43, 2),
    identT(Id_44, Id_42, C1),
    member(Id_44, Id_43),
    numericLiteralT(Id_45, Id_42, 32),
    member(Id_45, Id_43),
    Id_44 \= Id_45,
    directly_after(Id_18, Id_17, Id_16),
    assignT(Id_19, Id_12, Id_46, Id_47),
    identT(Id_46, Id_19, C2),
    memoryT(Id_47, Id_19, Id_48),
    operationT(Id_48, Id_47, Id_49, '+'),
    length(Id_49, 2),
    identT(Id_50, Id_48, I),
    member(Id_50, Id_49),
    identT(Id_51, Id_48, Str1),
    member(Id_51, Id_49),
    Id_50 \= Id_51,
    directly_after(Id_19, Id_18, Id_16),
    ifT(Id_20, Id_12, Id_52, Id_53, Id_54),
    operationT(Id_52, Id_20, Id_55, '||'),
    length(Id_55, 2),
    operationT(Id_56, Id_52, Id_58, '<'),
    length(Id_58, 2),
    identT(Id_59, Id_56, C2),
    member(Id_59, Id_58),
    numericLiteralT(Id_60, Id_56, 65),
    member(Id_60, Id_58),
    directly_after(Id_60, Id_59, Id_58),
    Id_59 \= Id_60,
    member(Id_56, Id_55),
    operationT(Id_57, Id_52, Id_61, '>'),
    length(Id_61, 2),
    identT(Id_62, Id_57, C2),
    member(Id_62, Id_61),
    numericLiteralT(Id_63, Id_57, 90),
    member(Id_63, Id_61),
    directly_after(Id_63, Id_62, Id_61),
    Id_62 \= Id_63,
    member(Id_57, Id_55),
    Id_56 \= Id_57,
    assignT(Id_53, Id_20, Id_64, Id_65),
    identT(Id_64, Id_53, V2),
    identT(Id_65, Id_53, C2),
    assignT(Id_54, Id_20, Id_66, Id_67),
    identT(Id_66, Id_54, V2),
    operationT(Id_67, Id_54, Id_68, '+'),
    length(Id_68, 2),
    identT(Id_69, Id_67, C2),
    member(Id_69, Id_68),
    numericLiteralT(Id_70, Id_67, 32),
    member(Id_70, Id_68),
    Id_69 \= Id_70,
    directly_after(Id_20, Id_19, Id_16),
    assignT(Id_21, Id_12, Id_71, Id_72),
    identT(Id_71, Id_21, Result),
    operationT(Id_72, Id_21, Id_73, '+'),
    length(Id_73, 2),
    identT(Id_74, Id_72, V1),
    member(Id_74, Id_73),
    operationT(Id_75, Id_72, Id_76, '-'),
    length(Id_76, 1),
    identT(Id_77, Id_75, V2),
    member(Id_77, Id_76),
    member(Id_75, Id_73),
    Id_74 \= Id_75,
    directly_after(Id_21, Id_20, Id_16),
    ifT(Id_22, Id_12, Id_78, Id_79, 'null'),
    operationT(Id_78, Id_22, Id_80, '!='),
    length(Id_80, 2),
    identT(Id_81, Id_78, Result),
    member(Id_81, Id_80),
    numericLiteralT(Id_82, Id_78, 0),
    member(Id_82, Id_80),
    directly_after(Id_82, Id_81, Id_80),
    Id_81 \= Id_82,
    breakT(Id_79, Id_22),
    directly_after(Id_22, Id_21, Id_16),
    assignT(Id_23, Id_12, Id_83, Id_84),
    identT(Id_83, Id_23, Str1),
    operationT(Id_84, Id_23, Id_85, '+'),
    length(Id_85, 2),
    identT(Id_86, Id_84, Str1),
    member(Id_86, Id_85),
    numericLiteralT(Id_87, Id_84, 1),
    member(Id_87, Id_85),
    Id_86 \= Id_87,
    directly_after(Id_23, Id_22, Id_16),
    directly_after(Id_3, Id_2, Id_1),
    I \= Str2,
    I \= Str1,
    I \= V1,
    I \= V2,
    I \= Result,
    I \= C2,
    I \= C1,
    Str2 \= Str1,
    Str2 \= V1,
    Str2 \= V2,
    Str2 \= Result,
    Str2 \= C2,
    Str2 \= C1,
    Str1 \= V1,
    Str1 \= V2,
    Str1 \= Result,
    Str1 \= C2,
    Str1 \= C1,
    V1 \= V2,
    V1 \= Result,
    V1 \= C2,
    V1 \= C1,
    V2 \= Result,
    V2 \= C2,
    V2 \= C1,
    Result \= C2,
    Result \= C1,
    C2 \= C1.

two_cond(ParentId, Id_0, ChildrenIds, Transformation, A, B, N) :-
    Transformation = 'if(a || b)return n;',
    sequenceT(Id_0, ParentId, Id_1),
    ChildrenIds = [Id_2, Id_3],
    ifT(Id_2, Id_0, Id_4, Id_5, 'null'),
    A = Id_4,
    returnT(Id_5, Id_2, Id_6),
    N = Id_6,
    ifT(Id_3, Id_0, Id_7, Id_8, 'null'),
    B = Id_7,
    returnT(Id_8, Id_3, Id_9),
    N2 = Id_9,
    directly_after(Id_3, Id_2, Id_1),
    same_expression(N, N2).

ternary_op(ParentId, Id_0, ChildrenIds, Transformation, Cond, X, V1, V2) :-
    Transformation = 'x = cond ? v1 : v2;',
    ifT(Id_0, ParentId, Id_1, Id_2, Id_3),
    Cond = Id_1,
    assignT(Id_2, Id_0, Id_4, Id_5),
    identT(Id_4, Id_2, X),
    V1 = Id_5,
    assignT(Id_3, Id_0, Id_6, Id_7),
    identT(Id_6, Id_3, X),
    V2 = Id_7.

memset_1(ParentId, Id_0, ChildrenIds, Transformation, Ptr, Value, Num) :-
    Transformation = 'memset(ptr, value, num);',
    loopT(Id_0, ParentId, 'doWhile', Id_1, Id_2),
    operationT(Id_1, Id_0, Id_3, '!='),
    length(Id_3, 2),
    identT(Id_4, Id_1, Num),
    member(Id_4, Id_3),
    numericLiteralT(Id_5, Id_1, 0),
    member(Id_5, Id_3),
    directly_after(Id_5, Id_4, Id_3),
    Id_4 \= Id_5,
    sequenceT(Id_2, Id_0, Id_6),
    length(Id_6, 3),
    assignT(Id_7, Id_2, Id_10, Id_11),
    memoryT(Id_10, Id_7, Id_12),
    identT(Id_12, Id_10, Ptr),
    identT(Id_11, Id_7, Value),
    assignT(Id_8, Id_2, Id_13, Id_14),
    identT(Id_13, Id_8, Ptr),
    operationT(Id_14, Id_8, Id_15, '+'),
    length(Id_15, 2),
    identT(Id_16, Id_14, Ptr),
    member(Id_16, Id_15),
    numericLiteralT(Id_17, Id_14, 1),
    member(Id_17, Id_15),
    Id_16 \= Id_17,
    directly_after(Id_8, Id_7, Id_6),
    assignT(Id_9, Id_2, Id_18, Id_19),
    identT(Id_18, Id_9, Num),
    operationT(Id_19, Id_9, Id_20, '+'),
    length(Id_20, 2),
    identT(Id_21, Id_19, Num),
    member(Id_21, Id_20),
    numericLiteralT(Id_22, Id_19, -1),
    member(Id_22, Id_20),
    Id_21 \= Id_22,
    directly_after(Id_9, Id_8, Id_6),
    Num \= Ptr,
    Num \= Value,
    Ptr \= Value.

compund_condition(ParentId, Id_0, ChildrenIds, Transformation, V, Conda, Condb1, Condb2) :-
    Transformation = 'v = (!condA && condB1) || (condA && condB2);',
    sequenceT(Id_0, ParentId, Id_1),
    ChildrenIds = [Id_2, Id_3],
    assignT(Id_2, Id_0, Id_4, Id_5),
    identT(Id_4, Id_2, V),
    Condb1 = Id_5,
    ifT(Id_3, Id_0, Id_6, Id_7, 'null'),
    Conda = Id_6,
    assignT(Id_7, Id_3, Id_8, Id_9),
    identT(Id_8, Id_7, V),
    Condb2 = Id_9,
    directly_after(Id_3, Id_2, Id_1).

parity_1(ParentId, Id_0, ChildrenIds, Transformation, V) :-
    Transformation = 'v % 2 == 0;',
    operationT(Id_0, ParentId, Id_1, '!='),
    length(Id_1, 2),
    operationT(Id_2, Id_0, Id_4, '%'),
    length(Id_4, 2),
    identT(Id_5, Id_2, V),
    member(Id_5, Id_4),
    numericLiteralT(Id_6, Id_2, 2),
    member(Id_6, Id_4),
    directly_after(Id_6, Id_5, Id_4),
    Id_5 \= Id_6,
    member(Id_2, Id_1),
    numericLiteralT(Id_3, Id_0, 1),
    member(Id_3, Id_1),
    directly_after(Id_3, Id_2, Id_1),
    Id_2 \= Id_3.

